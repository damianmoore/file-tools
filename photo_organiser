#!/usr/bin/env python
import errno
import glob
import os
import re
import shutil
import time

import photo_organiser_conf as settings
from utils import run_cmd, determine_same_file


SYSTEM_DEPENDENCIES = ['exiftool', ]
PHOTO_FILE_EXTS = ['cr2', 'jpeg', 'jpg', ]


def missing_dependencies():
    missing = []
    for dependency in SYSTEM_DEPENDENCIES:
        if not len(run_cmd('which %s' % dependency)):
            missing.append(dependency)
    return missing


def get_time(path):
    '''
    Tries to get date/time from EXIF data which works on JPEG and CR2 files.
    Failing it that it tries to find the date in the filename.
    '''
    cmd = 'exiftool -dateTimeOriginal "%s"' % path
    try:
        date_str = run_cmd(cmd).split(' : ')[1].strip()
        return time.strptime(date_str, '%Y:%m:%d %H:%M:%S')
    except (IndexError, ValueError):
        fn = os.path.split(path)[1]
        matched = re.search(r'(20[0-9]{2})-([0-9]{2})-([0-9]{2})\D', fn)
        if not matched:
            matched = re.search(r'\D(20[0-9]{2})([0-9]{2})([0-9]{2})\D', fn)
        if matched:
            date_str = '{}-{}-{}'.format(matched.group(1), matched.group(2), matched.group(3))
            return time.strptime(date_str, '%Y-%m-%d')
        return None


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_input_paths():
    paths = []
    for input_path in settings.INPUT_PATHS:
        paths.extend(glob.glob(input_path))
    return paths


def determine_destination(fn):
    extension = os.path.splitext(fn)[1][1:].lower()
    for output_filter in settings.OUTPUT_FILTERS:
        if extension in output_filter['EXTENSIONS']:
            return output_filter['PATH']
    return None


def find_new_file_name(path):
    '''
    If a file already exists in the same place with the same name, this
    function will find a new name to use, changing the extension to
    '_1.jpg' or similar.
    '''
    counter = 1
    fn, extension = os.path.splitext(path)
    attempt = path
    while os.path.exists(attempt):
        attempt = '{}_{}{}'.format(fn, counter, extension)
        counter += 1
    return attempt


def organise_photos(orig, move=False):
    imported = 0
    were_duplicates = 0
    were_bad = 0

    for r, d, f in os.walk(orig):
        for fn in sorted(f):
            filepath = os.path.join(r, fn)
            dest = determine_destination(filepath)
            if not dest:
                # No filters match this file type
                pass
            elif os.path.getsize(filepath) < 102400:
                print 'FILE VERY SMALL (<100k - PROBABLY THUMBNAIL), NOT IMPORTING {}'.format(filepath)
                were_bad += 1
            else:
                t = get_time(filepath)
                if t:
                    destpath = '%02d/%02d/%02d' % (t.tm_year, t.tm_mon, t.tm_mday)
                    destpath = os.path.join(dest, destpath)
                    mkdir_p(destpath)
                    destpath = os.path.join(destpath, fn)

                    if filepath == destpath:
                        # File is already in the right place so be very careful not to do anything like delete it
                        pass
                    elif not os.path.exists(destpath):
                        if move:
                            shutil.move(filepath, destpath)
                        else:
                            shutil.copyfile(filepath, destpath)
                        imported += 1
                        print 'IMPORTED  {} -> {}'.format(filepath, destpath)
                    else:
                        print 'PATH EXISTS  {} -> {}'.format(filepath, destpath)
                        same = determine_same_file(filepath, destpath)
                        if same:
                            os.remove(filepath)
                            were_duplicates += 1
                            print 'PHOTO ALREADY IMPORTED, DELETED FROM SOURCE'
                        else:
                            print 'NEED TO IMPORT UNDER DIFFERENT NAME'
                            destpath = find_new_file_name(destpath)
                            shutil.move(filepath, destpath)
                            imported += 1
                            print 'IMPORTED  {} -> {}'.format(filepath, destpath)

                else:
                    print 'ERROR READING DATE: {}'.format(filepath)
                    were_bad += 1

    if imported or were_duplicates:
        print '\n{} PHOTOS IMPORTED\n{} WERE DUPLICATES\n{} WERE BAD'.format(imported, were_duplicates, were_bad)


if __name__ == '__main__':
    missing_dependencies = missing_dependencies()
    if missing_dependencies:
        print 'Missing dependencies: {}'.format(', '.join(missing_dependencies))
        exit(1)
    for path in get_input_paths():
        organise_photos(path, move=True)
